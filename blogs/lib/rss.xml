<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[notes]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib/media/favicon.png</url><title>notes</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Sun, 22 Jun 2025 13:37:32 GMT</lastBuildDate><atom:link href="lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sun, 22 Jun 2025 13:37:31 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[Typed Actor System]]></title><description><![CDATA[ 
 <br><br>
<br><a data-href="#Introduction" href="about:blank#Introduction" class="internal-link" target="_self" rel="noopener nofollow">Introduction</a>
<br><a data-href="#Creating the project" href="about:blank#Creating_the_project" class="internal-link" target="_self" rel="noopener nofollow">Creating the project</a>
<br><a data-href="#Thanks" href="about:blank#Thanks" class="internal-link" target="_self" rel="noopener nofollow">Thanks</a> 
<br><br>An actor model in concurrent programming is a conceptual model for handling concurrent computation, the core concepts of an Actor model are as follows<br>
<br>Processes messages asynchronously
<br>Has it's own state which is not shared
<br>Can do one of the three things when it receives a message

<br>Send message to other actors
<br>Create new actors
<br>Modify internal state and behaviour 


<br><br>we can start out the Rust project with the following command ( for now we simply name it as tyactor , stands for typed-actor )<br>cargo new --lib tyactor
<br>but this only creates a project with a library file. we need some way to run it as well. so let's add a binary file to it. Let this be inside the folder app<br>mkdir app
touch app/main.rs
<br>now change the Cargo.toml accordingly so that we can expose the library as well as run an example using the library functions with cargo command itself.<br>[lib]
name = "tyactor"
path = "src/lib.rs"

[[bin]]
name = "example"
path = "app/main.rs"
<br>now to run the code inside app/main.rs we only need to run the command <br>cargo run example
<br><br>consider the following code for creating a mpsc::channel<br>use tokio::sync::{mpsc, oneshot};

#[tokio::main]
async fn main() {
    // mpsc::channel retursn a Sender (tx) and a mutable Receiver (mut rx)
    let (tx1, mut rx) = mpsc::channel(32);

    // we clone the Sender to simulate the idea of sending data from two
    // different sources, both of these senders will be pointing to the
    // same receiver
    let tx2 = tx1.clone();

    // spawns an async tokio task that sends the data to the receiver.
    // this is an async operation as the `tx1.send()` returns a future
    // on which we `await` to see if the value was sent correctly, we may
    // have to wait here if the receiver queue is full. the `move` keywords
    // here means that the value `tx1` is moved into this context and is
    // dropped as soon as the block finishes executing. ie, when the data
    // is sent
    tokio::spawn(async move {
        if let Err(_) = tx1.send(3).await {
            println!("the receiver dropped");
        }
    });

    tokio::spawn(async move {
        if let Err(_) = tx2.send(4).await {
            println!("the receiver dropped");
        }
    });

    // the Receiver will return a `Some(value)` as long as there's a Sender
    // active. and in this case when both the Senders are dropped the
    // `rx.recv().await` returns None. otherwise it polls the next message
    // from the queue and we can process the message
    while let Some(msg) = rx.recv().await {
        println!("Got {:?}", msg);
    }
}

<br><br>let's use the previous ideas to write two structs for Actor which is responsible for handling messages sent to it and an ActorHandle which can be used to send messages to the Actor . This code is inspired by <a data-tooltip-position="top" aria-label="https://ryhl.io/blog/actors-with-tokio/" rel="noopener nofollow" class="external-link" href="https://ryhl.io/blog/actors-with-tokio/" target="_blank">Actors with Tokio</a><br>use std::marker::Send;
use tokio::sync::mpsc;

/// The Actor struct, responsible for spawning the actor that receive the
/// messages and then handle them, the actor itself may have a state that can
/// be affected by the message
pub struct Actor&lt;M: Send + 'static, S: Default + Send&gt; {
    // a handle to the receiver from mpsc::channel so that we can use it to
    // receive messages
    receiver: mpsc::Receiver&lt;M&gt;,
    // the state of the actor that can be modified by the handle function
    state: S,
    // the state is borrowed mutably so that the function may modify it
    handle: fn(&amp;mut S, msg: M) -&gt; (),
}

impl&lt;M: Send + 'static, S: Default + Send&gt; Actor&lt;M, S&gt; {
    pub fn new(tx: mpsc::Receiver&lt;M&gt;, f: fn(&amp;mut S, M) -&gt; ()) -&gt; Self {
        Actor {
            receiver: tx,
            state: S::default(),
            handle: f,
        }
    }
    pub async fn start(mut self) {
        while let Some(msg) = self.receiver.recv().await {
            (self.handle)(&amp;mut self.state, msg)
        }
    }
}

/// ActorHandle can be used to send messages to the respective actor.
#[derive(Clone)]
pub struct ActorHandle&lt;M: Send + 'static&gt; {
    // holds a handle to the sender from mpsc::channel
    id: mpsc::Sender&lt;M&gt;,
}

impl&lt;M: Send&gt; ActorHandle&lt;M&gt; {
    // when we create a new actor what we only return is the handle, during
    // it's creation we launch the actor and create a handle to it as well.
    pub fn new&lt;S: Default + Send + 'static&gt;(size: usize, f: fn(&amp;mut S, M) -&gt; ()) -&gt; Self {
        let (tx, rx): (mpsc::Sender&lt;M&gt;, mpsc::Receiver&lt;M&gt;) = mpsc::channel(size);
        let actor: Actor&lt;M, S&gt; = Actor::new(rx, f);
        tokio::spawn(async move {
            let _ = actor.start().await;
        });
        let handle = ActorHandle { id: tx };
        return handle;
    }
    pub async fn send(self, msg: M) -&gt; () {
        if let Err(e) = self.id.send(msg).await {
            eprintln!("{:?}", e);
        }
    }
}

<br><br>let's capture the idea of an Actor through a trait to make this process more straightforward<br>pub trait ActorTrait {
    type State : Default + Send + 'static;
    type Message : Send + 'static;
    fn handle(state: &amp;mut Self::State, msg: Self::Message) -&gt; ();
}
<br>changing the ActorHandle implementation into <br>    pub fn new&lt;A : ActorTrait&lt;Message = M&gt;&gt;(size: usize) -&gt; Self {
        let (tx, rx): (mpsc::Sender&lt;M&gt;, mpsc::Receiver&lt;M&gt;) 
            = mpsc::channel(size);
        let actor: Actor&lt;M, &lt;A as ActorTrait&gt;::State&gt; 
            = Actor::new(rx, &lt;A as ActorTrait&gt;::handle);
        tokio::spawn(async move {
            let _ = actor.start().await;
        });
        let handle = ActorHandle { id: tx };
        return handle;
    }

<br><br>This page is still Work in Progress<br>
checkout more of my works at :<br>
üè† <a data-tooltip-position="top" aria-label="https://isqnwtn.github.io/" rel="noopener nofollow" class="external-link" href="https://isqnwtn.github.io/" target="_blank">home</a>]]></description><link>Typed Actor System.html</link><guid isPermaLink="false">Typed Actor System.md</guid><pubDate>Sun, 22 Jun 2025 13:37:17 GMT</pubDate></item></channel></rss>